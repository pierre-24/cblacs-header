name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ dev ]

env:
  BUILD_DIR: _build
  NPROCS: 2

jobs:
  build:
    name: Test library
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        la_backend: [scalapack, mkl, mkl+ilp64]
        mpi: [openmpi, mpich]
    steps:
      - uses: actions/checkout@v3

      - name: Install MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}

      - name: Install Meson & Ninja
        run: |
          sudo apt install meson ninja-build

      - name: install & setup (netlib scaLAPACK)
        if: ${{ matrix.la_backend == 'scalapack' }}
        run: |
          sudo apt install libscalapack-${{ matrix.mpi }}-dev
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=scalapack-${{ matrix.mpi }} -Dtests=true --buildtype=debug

      - name: install MKL
        if: ${{ contains(matrix.la_backend, 'mkl') }}
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt update
          sudo apt install intel-oneapi-mkl-devel

      - name: setup (MKL)
        if: ${{ matrix.la_backend == 'mkl' }}
        run: >-
          meson setup ${{ env.BUILD_DIR }} 
          -Dla_backend=mkl-static-lp64-seq 
          -Dmkl_mpi=${{ matrix.mpi }} 
          --buildtype=debug

      - name: setup (MKL with ILP64)
        if: ${{ matrix.la_backend == 'mkl+ilp64' }}
        run: >-
          meson setup ${{ env.BUILD_DIR }} 
          -Dla_backend=mkl-static-ilp64-seq 
          -Dmkl_mpi=${{ matrix.mpi }} 
          -Dilp64=true 
          --buildtype=debug

      - name: Compile
        run: >-
          meson compile
          -C ${{ env.BUILD_DIR }}

      - name: Run unit tests
        run: |
          meson configure ${{ env.BUILD_DIR }} -Dtests=true -Dtests_nprocs=${{ env.NPROCS }}
          meson test --print-errorlogs -C ${{ env.BUILD_DIR }}
