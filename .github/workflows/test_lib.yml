name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ dev ]

env:
  BUILD_DIR: _build
  NPROCS: 2
  CC: mpicc
  AOCLROOT: /opt/AMD/aocl/aocl-linux-gcc-4.2.0/gcc
  ONEAPIROOT: /opt/intel/oneapi

jobs:
  build:
    name: Test library
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - la_backend: scalapack
            mpi: openmpi
          - la_backend: mkl
            mpi: intelmpi
          - la_backend: mkl+ilp64
            mpi: openmpi
          - la_backend: mkl+ilp64
            mpi: intelmpi
          - la_backend: aocl
            mpi: openmpi
          # for an unknown reason, these (randomly?) fail, see #3
          - la_backend: mkl
            mpi: openmpi
          - la_backend: aocl+ilp64
            mpi: openmpi
    steps:
      - uses: actions/checkout@v3

      # INSTALL
      - name: Install MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}

      - name: Install Meson & Ninja
        run: |
          sudo apt install meson ninja-build

      - name: install & setup (netlib scaLAPACK)
        if: ${{ matrix.la_backend == 'scalapack' }}
        run: |
          sudo apt install libscalapack-${{ matrix.mpi }}-dev
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=scalapack-${{ matrix.mpi }} -Dtests=true --buildtype=debug

      - name: install MKL
        if: ${{ contains(matrix.la_backend, 'mkl') }}
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt update
          sudo apt install intel-oneapi-mkl-devel

      - name: install AOCL
        if: ${{ contains(matrix.la_backend, 'aocl') }}
        run: |
          wget https://download.amd.com/developer/eula/aocl/aocl-4-2/aocl-linux-gcc-4.2.0_1_amd64.deb
          sudo apt-get install -y ./aocl-linux-gcc-4.2.0_1_amd64.deb

      - name: switch AOCL to ILP64
        if: ${{ matrix.la_backend == 'aocl+ilp64' }}
        run: |
          ${{ env.AOCLROOT }}/set_aocl_interface_symlink.sh ilp64

      # SETUP
      - name: setup (MKL)
        if: ${{ matrix.la_backend == 'mkl' }}
        run: |
          source ${{ env.ONEAPIROOT }}/setvars.sh
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=mkl-static-lp64-seq -Dmkl_mpi=${{ matrix.mpi }} -Dtests=true -Dtests_nprocs=${{ env.NPROCS }} --buildtype=debug

      - name: setup (MKL with ILP64)
        if: ${{ matrix.la_backend == 'mkl+ilp64' }}
        run: |
          source ${{ env.ONEAPIROOT }}/setvars.sh
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=mkl-static-ilp64-seq -Dmkl_mpi=${{ matrix.mpi }} -Dilp64=true -Dtests=true -Dtests_nprocs=${{ env.NPROCS }} --buildtype=debug

      - name: setup (AOCL)
        if: ${{ matrix.la_backend == 'aocl' }}
        run: |
          source ${{ env.AOCLROOT }}/amd-libs.cfg
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=custom -Dla_libraries=scalapack -Dtests=true -Dtests_nprocs=${{ env.NPROCS }} --buildtype=debug

      - name: setup (AOCL with ILP64)
        if: ${{ matrix.la_backend == 'aocl+ilp64' }}
        run: |
          source ${{ env.AOCLROOT }}/amd-libs.cfg
          meson setup ${{ env.BUILD_DIR }} -Dla_backend=custom -Dla_libraries=scalapack -Dilp64=true -Dtests=true -Dtests_nprocs=${{ env.NPROCS }} --buildtype=debug

      # TESTs
      - name: Compile & test
        run: |
          if [[ "${{ contains(matrix.la_backend, 'mkl') }}" == "true" ]]; then
            source ${{ env.ONEAPIROOT }}/setvars.sh
          elif  [[ "${{ contains(matrix.la_backend, 'aocl') }}" == "true" ]]; then
            source ${{ env.AOCLROOT }}/amd-libs.cfg
          fi
          meson test --print-errorlogs -C ${{ env.BUILD_DIR }}
